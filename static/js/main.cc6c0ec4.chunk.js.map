{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","props","useState","movies","setMovies","trailerUrl","settrailerUrl","useEffect","a","get","fetchUrl","request","data","results","fetchData","className","title","map","movie","isLargeRow","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc6c0ec4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/* base url to make requests to the movie database */\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport movieTrailer from 'movie-trailer'\r\nimport YouTube from 'react-youtube'\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row(props) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, settrailerUrl] = useState(\"\")\r\n\r\n  //A snippet of code which runs on a specific condition/variable\r\n  useEffect(() => {\r\n    //if [], run once when the row loads, and dont run again\r\n    async function fetchData() {\r\n      const request = await axios.get(props.fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [props.fetchUrl]);\r\n\r\n  const opts = {\r\n    height:\"390\",\r\n    width: \"100%\",\r\n    playerVars:{\r\n      autoplay:1,\r\n    }\r\n}\r\n\r\nconst handleClick = (movie) =>{\r\n  if(trailerUrl){\r\n    settrailerUrl('')\r\n  } else {\r\n    movieTrailer(movie?.name||\"\")\r\n    .then((url)=> {\r\n    const urlParams = new URLSearchParams(new URL(url).search);\r\n    settrailerUrl(urlParams.get('v'))\r\n  }).catch((err) => console.log(err))\r\n}\r\n}\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{props.title}</h2>\r\n      {/* container with posters */}\r\n      <div className=\"row_posters\">\r\n        {/* several row poster */}\r\n        {movies.map((movie) => {\r\n          return (\r\n            <img\r\n              key={movie.id}\r\n              className={`row_poster ${props.isLargeRow && \"row_posterLarge\"}`}\r\n              src={`${base_url}${\r\n                props.isLargeRow ? movie.poster_path : movie.backdrop_path\r\n              }`}\r\n              alt={movie.name}\r\n              onClick={()=>handleClick(movie)}\r\n            ></img>\r\n          );\r\n        })}\r\n      </div>\r\n  {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"fde9061228d08a675ee71b2202f95fc9\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner(props) {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        {/* Background Imgae */}\r\n\r\n        {/* title */}\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        {/* 2 buttons */}\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        {/* description */}\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadebottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://assets.brand.microsites.netflix.io/assets/493f5bba-81a4-11e9-bf79-066b49664af6_cm_1440w.png?v=49\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"avatar_logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"Avatar Logo\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* NavBar */}\n      <Nav />\n      {/* Banner */}\n      <Banner />\n\n      <Row\n        title=\"NETFLIX Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      ></Row>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}></Row>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}></Row>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}></Row>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}></Row>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}></Row>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}></Row>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}></Row>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}